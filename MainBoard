package v1;

import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.ArrayList;

public class MainBoard extends Application {

    private final int TILE_WIDTH = 110;
    private final int TILE_HEIGHT = 110;
    private static int[] lastClicked = new int[2];
    private static boolean xTurn = true;
    private static boolean playable = true;
    private static LocalBoard[][] globalBoard = new LocalBoard[3][3];
    private static ArrayList<BoardCombo> boardCombos = new ArrayList<>();

    private Parent createContent() {
        Pane root = new Pane();
        root.setPrefSize(TILE_WIDTH * 9, TILE_HEIGHT * 9);

        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                LocalBoard localBoard = new LocalBoard(TILE_WIDTH, TILE_HEIGHT);
                localBoard.setTranslateX(row * TILE_WIDTH * 3);
                localBoard.setTranslateY(col * TILE_HEIGHT * 3);

                globalBoard[row][col] = localBoard;

                root.getChildren().addAll(localBoard);
            }
        }

        //add da combos
        for (int row = 0; row < 3; row++) {
            boardCombos.add(new BoardCombo(globalBoard[row][0],
                    globalBoard[row][1],
                    globalBoard[row][2]));
        }
        for (int col = 0; col < 3; col++) {
            boardCombos.add(new BoardCombo(globalBoard[0][col],
                    globalBoard[1][col],
                    globalBoard[2][col]));
        }
        boardCombos.add(new BoardCombo(globalBoard[0][0],
                globalBoard[1][1],
                globalBoard[2][2]));
        boardCombos.add(new BoardCombo(globalBoard[0][2],
                globalBoard[1][1],
                globalBoard[2][0]));

        return root;
    }


    public void start(Stage primaryStage) {
        primaryStage.setScene(new Scene(createContent()));
        primaryStage.show();
    }


    public static void update() {
        for (BoardCombo boardCombo : boardCombos) {
            if (boardCombo.isComplete()) {
                playable = false;
                //playWinAnimation();
            }
        }
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                globalBoard[r][c].border().setStroke(null);
            }
        }
        if (playable) {
            if (globalBoard[lastClicked[0]][lastClicked[1]].isLocalPlayable())
                globalBoard[lastClicked[0]][lastClicked[1]].border().setStroke(Color.BLACK);
            else
                for (int r = 0; r < 3; r++)
                    for (int c = 0; c < 3; c++)
                        if (globalBoard[r][c].isLocalPlayable())
                            globalBoard[r][c].border().setStroke(Color.BLACK);
        }
    }

    public static boolean getXTurn() {
        return xTurn;
    }

    public static void setXTurn(boolean b) {
        xTurn = b;
    }

    public static boolean getPlayable() {
        return playable;
    }

    public static void setLastClicked(int row, int col) {
        lastClicked[0] = row;
        lastClicked[1] = col;
    }


    private class BoardCombo {
        private LocalBoard[] localBoards;

        BoardCombo(LocalBoard... localBoards) {
            this.localBoards = localBoards;
        }

        public boolean isComplete() {
            if (localBoards[0].isEmpty())
                return false;

            return localBoards[0].getText().equals(localBoards[1].getText())
                    && localBoards[1].getText().equals(localBoards[2].getText());
        }
    }

    public static void main(String[] args) {launch(args);}
}
