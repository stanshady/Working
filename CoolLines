import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

public class CoolLines extends Application {

    Pane root;

    private Parent initRoot() {
        root = new Pane();
        root.setPrefSize(800, 800);


        //Change the startX,startY,endX,and endY for each line.  Play around!
        Line lineA = new Line(200, 500, 600, 700);
        Line lineB = new Line(lineA.getStartX(), lineA.getStartY(), 400, 100);

        //getLength() and getAngle() are methods I wrote.  See below.
        double lenA = getLength(lineA);
        double lenB = getLength(lineB);

        double angleA = getAngle(lineA);
        double angleB = getAngle(lineB);

        //see details for makeConnection() below.
        //Normally we wouldn't manually input 20 lines.
        //We would use a loop.

        //lineA endpoint to lineB
        Line line0 = makeConnection(lineA,lineB,0);
        Line line1 = makeConnection(lineA,lineB,1);
        Line line2 = makeConnection(lineA,lineB,2);
        Line line3 = makeConnection(lineA,lineB,3);
        Line line4 = makeConnection(lineA,lineB,4);
        Line line5 = makeConnection(lineA,lineB,5);
        Line line6 = makeConnection(lineA,lineB,6);
        Line line7 = makeConnection(lineA,lineB,7);
        Line line8 = makeConnection(lineA,lineB,8);
        Line line9 = makeConnection(lineA,lineB,9);

        //lineB endpoint to lineA
        Line line10 = makeConnection(lineB,lineA,0);
        Line line11 = makeConnection(lineB,lineA,1);
        Line line12 = makeConnection(lineB,lineA,2);
        Line line13 = makeConnection(lineB,lineA,3);
        Line line14 = makeConnection(lineB,lineA,4);
        Line line15 = makeConnection(lineB,lineA,5);
        Line line16 = makeConnection(lineB,lineA,6);
        Line line17 = makeConnection(lineB,lineA,7);
        Line line18 = makeConnection(lineB,lineA,8);
        Line line19 = makeConnection(lineB,lineA,9);

        root.getChildren().addAll(lineA,lineB);
        root.getChildren().addAll(line0, line1, line2, line3, line4, line5, line6, line7, line8, line9);
        root.getChildren().addAll(line10, line11, line12, line13, line14, line15, line16, line17, line18, line19);

        return root;
    }

    //Euclidean distance
    public double getLength(Line line) {
        return Math.sqrt((line.getStartX() - line.getEndX()) * (line.getStartX() - line.getEndX()) +
                (line.getStartY() - line.getEndY()) *(line.getStartY() - line.getEndY()));
    }

    //Adds pi to the angle if (endX - startX) < 0
    //because of the restricted range of atan.
    public double getAngle(Line line) {
        //note the reversal of sign on the difference in y-values
        //because positive y is downwards.
        double ret = Math.atan((line.getStartY()-line.getEndY()) /
                (line.getEndX() - line.getStartX()));

        if(line.getEndX()-line.getStartX() < 0)
            ret += Math.PI;
        return ret;
    }

    //Draws a red line from the endpoints of start to
    //points on end that are on numLine/10 the length of end
    public Line makeConnection(Line start, Line end, int numLine){
        Line ret = new Line(start.getEndX(),
                start.getEndY(),
                end.getStartX() + (numLine + 1)*0.1 * getLength(end) * Math.cos(getAngle(end)),
                end.getStartY() - (numLine + 1)*0.1 * getLength(end) * Math.sin(getAngle(end)));

        ret.setStroke(Color.RED);
        return ret;
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(initRoot()));
        primaryStage.show();
    }
}
